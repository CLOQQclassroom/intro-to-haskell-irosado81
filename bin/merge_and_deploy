#!/usr/bin/env ruby
# frozen_string_literal: true
# This recreates the scenario in https://github.com/github/github/pull/52506
# To run in dev: ./merge_and_deploy dev
# To run on non production environment (branch-lab): ./merge_and_deploy deployments-not-attached-to-prs.branch
# To run in production: ./merge_and_deploy prod
#
# - Creates a new repo with a README
# - Creates a new file in a new branch
# - Opens a PR for it
# - Updates master with a new file
# - Merges master into the pr branch
# - Creates a deployment on the pr

# require 'pry'
require 'awesome_print'
require 'httparty'
require 'octokit'

if ARGV.count < 1
  puts 'Error needs an argument'
  exit 1
end

environment = ARGV.shift

if environment == 'dev'
  Octokit.configure do |c|
    c.api_endpoint = 'http://api.github.dev'
    c.web_endpoint = 'http://github.dev'
  end
end

token = environment == 'dev' ? 'GITHUB_DEV_TOKEN' : 'GITHUB_TOKEN'

access_token = ENV[token]
branch       = 'my-new-license'

gh_client = Octokit::Client.new(access_token: access_token)

repo = gh_client.create_repository(
  "deploy-and-merge-test-#{Time.now}",
  auto_init: true,
  private: environment != 'dev' # private only if we aren't in dev
)

master_sha = gh_client.ref(repo.full_name, 'heads/master').object.sha

gh_client.create_ref(repo.full_name, "refs/heads/#{branch}", master_sha)

gh_client.create_contents(
  repo.full_name,
  'LICENSE',
  'TERMS AND CONDITIONS',
  'MIT',
  branch: branch
)

pull_request = gh_client.create_pull_request(
  repo.full_name,
  'master',
  branch,
  'Add a LICENSE'
)

gh_client.create_contents(
  repo.full_name,
  'README2.md',
  'ANOTHER FILE',
  'NEW CONTENT',
  branch: 'master'
)

base_ref = pull_request.base.ref
head_ref = pull_request.head.ref

if environment !~ /prod|dev/
  branch_lab_url = "https://#{environment}.github.com"

  Octokit.configure do |c|
    c.api_endpoint = "#{branch_lab_url}/api/v3"
    c.web_endpoint = "#{branch_lab_url}/api/v3"
  end

  response = HTTParty.get("#{branch_lab_url}/site/sha", headers: { 'Authentication' => "token #{access_token}" })
  headers  = { 'User-Agent' => "curl/#{response.body}" }

  ap 'Merge'
  ap gh_client.merge(repo.full_name, head_ref, base_ref, headers: headers)

  # sleep(30)

  ap 'Deployment'
  ap gh_client.create_deployment(repo.full_name, head_ref, headers: headers)
else
  ap 'Merge'
  ap gh_client.merge(repo.full_name, head_ref, base_ref)

  # sleep(30)

  ap 'Deployment'
  ap gh_client.create_deployment(repo.full_name, head_ref)
end

ap pull_request.html_url
