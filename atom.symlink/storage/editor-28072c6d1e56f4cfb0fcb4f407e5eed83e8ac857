{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mark/src/frozon/passbook","buffers":[{"text":"require 'digest/sha1'\nrequire 'openssl'\nrequire 'zipruby'\nrequire 'base64'\nrequire 'pry'\n\nmodule Passbook\n  class PKPass\n    attr_accessor :pass, :manifest_files\n\n    TYPES = ['boarding-pass', 'coupon', 'event-ticket', 'store-card', 'generic']\n\n    def initialize pass\n      $stdout.binmode\n      @pass      = pass\n      @manifest_files     = []\n      @buf = ''\n    end\n\n    def addFile file\n      @manifest_files << file\n    end\n\n    def addFiles files\n      @manifest_files += files\n    end\n\n    # for backwards compatibility\n    def json= json\n      @pass = json\n    end\n\n    def build\n      manifest = createManifest\n\n      # Check pass for necessary files and fields\n      checkPass manifest\n\n      # Create pass signature\n      signature = createSignature manifest\n\n      return [manifest, signature]\n    end\n\n    # Backward compatibility\n    def create\n      self.file.path\n    end\n\n    # Return a Tempfile containing our ZipStream\n    def file(options = {})\n      options[:file_name] ||= 'pass.pkpass'\n\n      temp_file = Tempfile.new(options[:file_name])\n      temp_file.write self.stream.string\n      temp_file.close\n\n      temp_file\n    end\n\n    # Return a ZipOutputStream\n    def stream\n      manifest, signature = build\n\n      outputZip manifest, signature\n    end\n\n    def get_p12_cert_and_key\n      key_hash = {}\n      if Passbook.p12_key\n        key_hash[:key] = OpenSSL::PKey::RSA.new File.read(Passbook.p12_key), Passbook.p12_password\n        key_hash[:cert] = OpenSSL::X509::Certificate.new File.read(Passbook.p12_certificate)\n      else\n        p12 = OpenSSL::PKCS12.new File.read(Passbook.p12_cert), Passbook.p12_password\n        key_hash[:key], key_hash[:cert] = p12.key, p12.certificate\n      end\n      key_hash\n    end\n\n    def createSignature manifest\n      p12   = get_p12_cert_and_key\n      wwdc  = OpenSSL::X509::Certificate.new File.read(Passbook.wwdc_cert)\n      pk7   = OpenSSL::PKCS7.sign p12[:cert], p12[:key], manifest.to_s, [wwdc], OpenSSL::PKCS7::BINARY | OpenSSL::PKCS7::DETACHED\n      data  = OpenSSL::PKCS7.write_smime pk7\n\n      str_debut = \"filename=\\\"smime.p7s\\\"\\n\\n\"\n      data = data[data.index(str_debut)+str_debut.length..data.length-1]\n      str_end = \"\\n\\n------\"\n      data = data[0..data.index(str_end)-1]\n\n      return Base64.decode64(data)\n    end\n\n    private\n\n    def checkPass manifest\n      # Check for default images\n      raise 'Icon missing' unless manifest.include?('icon.png')\n      raise 'Icon@2x missing' unless manifest.include?('icon@2x.png')\n\n      # Check for developer field in JSON\n      raise 'Pass Type Identifier missing' unless @pass.include?('passTypeIdentifier')\n      raise 'Team Identifier missing' unless @pass.include?('teamIdentifier')\n      raise 'Serial Number missing' unless @pass.include?('serialNumber')\n      raise 'Organization Name Identifier missing' unless @pass.include?('organizationName')\n      raise 'Format Version' unless @pass.include?('formatVersion')\n      raise 'Format Version should be a numeric' unless JSON.parse(@pass)['formatVersion'].is_a?(Numeric)\n      raise 'Description' unless @pass.include?('description')\n    end\n\n    def createManifest\n      sha1s = {}\n      sha1s['pass.json'] = Digest::SHA1.hexdigest @pass\n\n      @manifest_files.each do |file|\n        if file.class == Hash\n          sha1s[file[:name]] = Digest::SHA1.hexdigest file[:content]\n        else\n          sha1s[File.basename(file)] = Digest::SHA1.file(file).hexdigest\n        end\n      end\n\n      return sha1s.to_json\n    end\n\n    def outputZip manifest, signature\n\n      Zip::Archive.open_buffer(@buf, Zip::CREATE) do |zip|\n        zip.add_buffer('pass.json', @pass)\n        zip.add_buffer('manifest.json', manifest)\n        zip.add_buffer('signature', signature)\n\n        @manifest_files.each do |file|\n          if file.class == Hash\n            zip.add_buffer(file[:name], file[:content])\n          else\n            zip.add_buffer(File.basename(file), IO.read(file))\n          end\n        end\n      end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[126,0],[126,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":36,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[127,0],[127,0]],"newRange":[[127,0],[128,0]],"oldText":"","newText":"      dazip = Zip::Archive.open_buffer(@buf, Zip::CREATE) do |zip|\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[130,0]],"newRange":[[128,0],[128,0]],"oldText":"      binding.pry\n      Zip::Archive.open_buffer(@buf, Zip::CREATE) do |zip|\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[140,0],[140,0]],"newRange":[[140,0],[142,0]],"oldText":"","newText":"\n      dazip\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[127,0],[127,0]],"newRange":[[127,0],[128,0]],"oldText":"","newText":"    Zip::Archive.open_buffer(@buf, Zip::CREATE) do |zip|\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[129,0]],"newRange":[[128,0],[128,0]],"oldText":"      dazip = Zip::Archive.open_buffer(@buf, Zip::CREATE) do |zip|\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[140,0],[142,0]],"newRange":[[140,0],[140,0]],"oldText":"\n      dazip\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[127,0],[127,0]],"newRange":[[127,0],[128,0]],"oldText":"","newText":"      Zip::Archive.open_buffer(@buf, Zip::CREATE) do |zip|\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[129,0]],"newRange":[[128,0],[128,0]],"oldText":"    Zip::Archive.open_buffer(@buf, Zip::CREATE) do |zip|\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[140,0],[140,0]],"newRange":[[140,0],[142,0]],"oldText":"","newText":"\n      @buf\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[140,0],[142,0]],"newRange":[[140,0],[140,0]],"oldText":"\n      @buf\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[54,0],[54,0]],"newRange":[[54,0],[55,0]],"oldText":"","newText":"      binding.pry\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[55,0],[55,0]],"newRange":[[55,0],[56,0]],"oldText":"","newText":"      temp_file.write self.stream.to_s\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[57,0]],"newRange":[[56,0],[56,0]],"oldText":"      temp_file.write self.stream.string\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[55,0],[55,0]],"newRange":[[55,0],[56,0]],"oldText":"","newText":"      temp_file.write self.buf\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[57,0]],"newRange":[[56,0],[56,0]],"oldText":"      temp_file.write self.stream.to_s\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[54,0],[54,0]],"newRange":[[54,0],[55,0]],"oldText":"","newText":"      temp_file.write self.stream.string\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[57,0]],"newRange":[[55,0],[55,0]],"oldText":"      binding.pry\n      temp_file.write self.buf\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[55,0],[55,0]],"newRange":[[55,0],[56,0]],"oldText":"","newText":"      binding.pry\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,0],[53,0]],"newRange":[[53,0],[54,0]],"oldText":"","newText":"      binding.pry\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[57,0]],"newRange":[[56,0],[56,0]],"oldText":"      binding.pry\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,0],[54,0]],"newRange":[[53,0],[53,0]],"oldText":"      binding.pry\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mark/src/frozon/passbook/lib/passbook/pkpass.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"05c57c60c1feb7aaccf04c0bfaa03e600044f38f","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":36,"softTabs":true,"displayBuffer":{"id":37,"softWrap":false,"editorWidthInChars":153,"scrollTop":2090,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mark/src/frozon/passbook/lib/passbook/pkpass.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mark/src/frozon/passbook/lib/passbook/pkpass.rb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{},"fuzzy-finder":{"/Users/mark/src/frozon/passbook/lib/passbook/pkpass.rb":1401991288656},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1611570},"tree-view":{"directoryExpansionStates":{"lib":{"passbook":{}}},"selectedPath":"/Users/mark/src/frozon/passbook/lib/passbook/pkpass.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}