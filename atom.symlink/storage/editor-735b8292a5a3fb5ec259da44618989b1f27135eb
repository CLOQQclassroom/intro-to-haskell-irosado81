{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{"/Users/mark/src/tarebyte/dotfiles/vimrc.symlink":"source.viml"}},"project":{"path":"/Users/mark/src/tarebyte/dotfiles","buffers":[{"text":"\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" NeoBundle\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nif has('vim_starting')\n  set nocompatible               \" Be iMproved\n\n  \" Required:\n  set runtimepath+=/Users/mark/.vim/bundle/neobundle.vim/\nendif\n\n\" Required:\ncall neobundle#begin(expand('/Users/jason/.vim/bundle'))\n\" required for several plugins\n  set nocompatible\n\n\" enable syntax highlighting\n  syntax on\n\n\" default color scheme\n  set background=dark\n\n\" don't wrap long lines\n  set nowrap\n\n\" show commands as we type them\n  set showcmd\n\n\" highlight matching brackets\n  set showmatch\n\n\" scroll the window when we get near the edge\n  set scrolloff=4 sidescrolloff=10\n\n\" use 2 spaces for tabs\n  set expandtab tabstop=2 softtabstop=2 shiftwidth=2\n  set smarttab\n\n\" enable line numbers, and don't make them any wider than necessary\n  set number numberwidth=2\n\n\" show the first match as search strings are typed\n  set incsearch\n\n\" highlight the search matches\n  set hlsearch\n\n\" searching is case insensitive when all lowercase\n  set ignorecase smartcase\n\n\" assume the /g flag on substitutions to replace all matches in a line\n  set gdefault\n\n\" set temporary directory (don't litter local dir with swp/tmp files)\n  set directory=/tmp/\n\n\" pick up external file modifications\n  set autoread\n\n\" don't abandon buffers when unloading\n  set hidden\n\n\" match indentation of previous line\n  set autoindent\n\n\" perform autoindenting based on filetype plugin\n  filetype plugin indent on\n\n\" don't blink the cursor\n  set guicursor=a:blinkon0\n\n\" show current line info (current/total)\n  set ruler rulerformat=%=%l/%L\n\n\" show status line\n  set laststatus=2\n\n\" augment status line\n  function! ETry(function, ...)\n    if exists('*'.a:function)\n      return call(a:function, a:000)\n    else\n      return ''\n    endif\n  endfunction\n  set statusline=[%n]\\ %<%.99f\\ %h%w%m%r%{ETry('CapsLockStatusline')}%y%{ETry('rails#statusline')}%{ETry('fugitive#statusline')}%#ErrorMsg#%*%=%-16(\\ %l,%c-%v\\ %)%P\n\n\" When lines are cropped at the screen bottom, show as much as possible\n  set display=lastline\n\n\" flip the default split directions to sane ones\n  set splitright\n  set splitbelow\n\n\" don't beep for errors\n  set visualbell\n\n\" make backspace work in insert mode\n  set backspace=indent,eol,start\n\n\" highlight trailing whitespace\n  set listchars=tab:>\\ ,trail:-,extends:>,precedes:<,nbsp:+\n  set list\n\n\" use tab-complete to see a list of possiblities when entering commands\n  set wildmode=list:longest,full\n\n\" allow lots of tabs\n  set tabpagemax=20\n\n\" remember last position in file\n  au BufReadPost * if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | exe \"normal g'\\\"\" | endif\n\n\" Thorfile, Rakefile, Vagrantfile, and Gemfile are Ruby\n  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby\n\n\" hb is handlebars\n  au BufNewFile,BufRead *.hb set ai filetype=handlebars\n\n\" hbs is handlebars\n  au BufNewFile,BufRead *.hbs set ai filetype=handlebars\n\n\" JSON is JS\n  au BufNewFile,BufRead *.json set ai filetype=javascript\n\n\" bring in the bundles for mac and windows\nset rtp+=~/vimfiles/vundle.git/\nset rtp+=~/.vim/vundle.git/\ncall vundle#rc()\n\nruntime! common_config/*.vim\nruntime! custom_config/*.vim\n\n\" for git, add spell checking and automatic wrapping at 72 columns\nautocmd Filetype gitcommit setlocal spell textwidth=72\n\ncolors solarized\nlet g:airline_powerline_fonts=1\nnmap <C-W>! <Plug>Kwbd\n","markers":{"markers":{"1":{"id":1,"range":[[8,43],[8,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":41,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[13,22],[14,0]],"newRange":[[13,22],[13,22]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[1,0],[1,0]]},"newParams":{"range":[[0,0],[0,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[111,0]],"oldText":"","newText":"\" required for several plugins\n  set nocompatible\n\n\" enable syntax highlighting\n  syntax on\n\n\" default color scheme\n  set background=dark\n\n\" don't wrap long lines\n  set nowrap\n\n\" show commands as we type them\n  set showcmd\n\n\" highlight matching brackets\n  set showmatch\n\n\" scroll the window when we get near the edge\n  set scrolloff=4 sidescrolloff=10\n\n\" use 2 spaces for tabs\n  set expandtab tabstop=2 softtabstop=2 shiftwidth=2\n  set smarttab\n\n\" enable line numbers, and don't make them any wider than necessary\n  set number numberwidth=2\n\n\" show the first match as search strings are typed\n  set incsearch\n\n\" highlight the search matches\n  set hlsearch\n\n\" searching is case insensitive when all lowercase\n  set ignorecase smartcase\n\n\" assume the /g flag on substitutions to replace all matches in a line\n  set gdefault\n\n\" set temporary directory (don't litter local dir with swp/tmp files)\n  set directory=/tmp/\n\n\" pick up external file modifications\n  set autoread\n\n\" don't abandon buffers when unloading\n  set hidden\n\n\" match indentation of previous line\n  set autoindent\n\n\" perform autoindenting based on filetype plugin\n  filetype plugin indent on\n\n\" don't blink the cursor\n  set guicursor=a:blinkon0\n\n\" show current line info (current/total)\n  set ruler rulerformat=%=%l/%L\n\n\" show status line\n  set laststatus=2\n\n\" augment status line\n  function! ETry(function, ...)\n    if exists('*'.a:function)\n      return call(a:function, a:000)\n    else\n      return ''\n    endif\n  endfunction\n  set statusline=[%n]\\ %<%.99f\\ %h%w%m%r%{ETry('CapsLockStatusline')}%y%{ETry('rails#statusline')}%{ETry('fugitive#statusline')}%#ErrorMsg#%*%=%-16(\\ %l,%c-%v\\ %)%P\n\n\" When lines are cropped at the screen bottom, show as much as possible\n  set display=lastline\n\n\" flip the default split directions to sane ones\n  set splitright\n  set splitbelow\n\n\" don't beep for errors\n  set visualbell\n\n\" make backspace work in insert mode\n  set backspace=indent,eol,start\n\n\" highlight trailing whitespace\n  set listchars=tab:>\\ ,trail:-,extends:>,precedes:<,nbsp:+\n  set list\n\n\" use tab-complete to see a list of possiblities when entering commands\n  set wildmode=list:longest,full\n\n\" allow lots of tabs\n  set tabpagemax=20\n\n\" remember last position in file\n  au BufReadPost * if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | exe \"normal g'\\\"\" | endif\n\n\" Thorfile, Rakefile, Vagrantfile, and Gemfile are Ruby\n  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby\n\n\" hb is handlebars\n  au BufNewFile,BufRead *.hb set ai filetype=handlebars\n\n\" hbs is handlebars\n  au BufNewFile,BufRead *.hbs set ai filetype=handlebars\n\n\" JSON is JS\n  au BufNewFile,BufRead *.json set ai filetype=javascript\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[1,0],[1,0]]},"newParams":{"range":[[0,0],[0,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[11,56]],"oldText":"","newText":"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" NeoBundle\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nif has('vim_starting')\n  set nocompatible               \" Be iMproved\n\n  \" Required:\n  set runtimepath+=/Users/jason/.vim/bundle/neobundle.vim/\nendif\n\n\" Required:\ncall neobundle#begin(expand('/Users/jason/.vim/bundle'))","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"range":[[0,26],[0,26]]},"newParams":{"range":[[0,0],[0,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[1,0],[1,0]]},"newParams":{"range":[[0,0],[0,0]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[8,26],[8,31]],"newRange":[[8,26],[8,26]],"oldText":"jason","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[8,26],[8,26]],"newRange":[[8,26],[8,27]],"oldText":"","newText":"m","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,27],[8,27]],"newRange":[[8,27],[8,28]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,28],[8,28]],"newRange":[[8,28],[8,29]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,29],[8,29]],"newRange":[[8,29],[8,30]],"oldText":"","newText":"k","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[138,22],[138,22]],"newRange":[[138,22],[139,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mark/src/tarebyte/dotfiles/vimrc.symlink","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"99e66e68b649f4d5ddfb16d4be58de6758d0b41e","deserializer":"TextBuffer"},{"text":"\" required for several plugins\n  set nocompatible\n\n\" enable syntax highlighting\n  syntax on\n\n\" default color scheme\n  set background=dark\n\n\" don't wrap long lines\n  set nowrap\n\n\" show commands as we type them\n  set showcmd\n\n\" highlight matching brackets\n  set showmatch\n\n\" scroll the window when we get near the edge\n  set scrolloff=4 sidescrolloff=10\n\n\" use 2 spaces for tabs\n  set expandtab tabstop=2 softtabstop=2 shiftwidth=2\n  set smarttab\n\n\" enable line numbers, and don't make them any wider than necessary\n  set number numberwidth=2\n\n\" show the first match as search strings are typed\n  set incsearch\n\n\" highlight the search matches\n  set hlsearch\n\n\" searching is case insensitive when all lowercase\n  set ignorecase smartcase\n\n\" assume the /g flag on substitutions to replace all matches in a line\n  set gdefault\n\n\" set temporary directory (don't litter local dir with swp/tmp files)\n  set directory=/tmp/\n\n\" pick up external file modifications\n  set autoread\n\n\" don't abandon buffers when unloading\n  set hidden\n\n\" match indentation of previous line\n  set autoindent\n\n\" perform autoindenting based on filetype plugin\n  filetype plugin indent on\n\n\" don't blink the cursor\n  set guicursor=a:blinkon0\n\n\" show current line info (current/total)\n  set ruler rulerformat=%=%l/%L\n\n\" show status line\n  set laststatus=2\n\n\" augment status line\n  function! ETry(function, ...)\n    if exists('*'.a:function)\n      return call(a:function, a:000)\n    else\n      return ''\n    endif\n  endfunction\n  set statusline=[%n]\\ %<%.99f\\ %h%w%m%r%{ETry('CapsLockStatusline')}%y%{ETry('rails#statusline')}%{ETry('fugitive#statusline')}%#ErrorMsg#%*%=%-16(\\ %l,%c-%v\\ %)%P\n\n\" When lines are cropped at the screen bottom, show as much as possible\n  set display=lastline\n\n\" flip the default split directions to sane ones\n  set splitright\n  set splitbelow\n\n\" don't beep for errors\n  set visualbell\n\n\" make backspace work in insert mode\n  set backspace=indent,eol,start\n\n\" highlight trailing whitespace\n  set listchars=tab:>\\ ,trail:-,extends:>,precedes:<,nbsp:+\n  set list\n\n\" use tab-complete to see a list of possiblities when entering commands\n  set wildmode=list:longest,full\n\n\" allow lots of tabs\n  set tabpagemax=20\n\n\" remember last position in file\n  au BufReadPost * if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | exe \"normal g'\\\"\" | endif\n\n\" Thorfile, Rakefile, Vagrantfile, and Gemfile are Ruby\n  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby\n\n\" hb is handlebars\n  au BufNewFile,BufRead *.hb set ai filetype=handlebars\n\n\" hbs is handlebars\n  au BufNewFile,BufRead *.hbs set ai filetype=handlebars\n\n\" JSON is JS\n  au BufNewFile,BufRead *.json set ai filetype=javascript\n","markers":{"markers":{"1":{"id":1,"range":[[98,46],[98,46]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":115,"goalBufferRange":null,"autoscroll":false},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mark/src/tarebyte/dotfiles/vim.symlink/common_config/general_config.vim","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f84b3d054be26bc1628ec8777d38dbfdfb06c5ae","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":41,"softTabs":true,"displayBuffer":{"id":42,"softWrap":false,"editorWidthInChars":153,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mark/src/tarebyte/dotfiles/vimrc.symlink","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":115,"softTabs":true,"displayBuffer":{"id":116,"softWrap":false,"editorWidthInChars":153,"scrollTop":1450,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mark/src/tarebyte/dotfiles/vim.symlink/common_config/general_config.vim","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"deserializer":"SettingsView","version":2,"activePanelName":"Packages","uri":"atom://config"}],"activeItemUri":"/Users/mark/src/tarebyte/dotfiles/vim.symlink/common_config/general_config.vim","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":[],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/mark/src/tarebyte/dotfiles/vimrc.symlink":1403842170738,"/Users/mark/src/tarebyte/dotfiles/vim.symlink/common_config/general_config.vim":1403842261129},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":321550},"tree-view":{"directoryExpansionStates":{"vim.symlink":{"common_config":{}}},"selectedPath":"/Users/mark/src/tarebyte/dotfiles/vim.symlink/common_config/general_config.vim","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"html2haml":{}}}